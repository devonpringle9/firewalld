FWD_START_TEST([masquerade])
AT_KEYWORDS(policy masquerade)

FWD_CHECK([--permanent --new-policy=foobar], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar --add-ingress-zone internal], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar --add-egress-zone public], 0, [ignore])

dnl permanent --> runtime
FWD_CHECK([--permanent --policy=foobar --add-masquerade], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar --add-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
FWD_CHECK([--permanent --policy foobar --query-masquerade], 0, ignore)
FWD_CHECK([--permanent --policy=foobar --query-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
FWD_RELOAD
FWD_CHECK([--policy foobar --query-masquerade], 0, ignore)
FWD_CHECK([--policy=foobar --query-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
dnl NFT_LIST_RULES([ip], [nat_policy_foobar_allow], 0, [dnl
dnl     FIXME: verify rules added
dnl ])
dnl NFT_LIST_RULES([ip6], [nat_policy_foobar_allow], 0, [dnl
dnl     FIXME: verify no rules added
dnl ])
dnl IPTABLES_LIST_RULES([nat], [pol_foobar_allow], 0, [dnl
dnl     FIXME: verify rules added
dnl ])
dnl IP6TABLES_LIST_RULES([nat], [pol_foobar_allow], 0, [dnl
dnl     FIXME: verify no rules added
dnl ])
FWD_CHECK([--permanent --policy=foobar --remove-masquerade], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar --remove-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
FWD_CHECK([--permanent --policy foobar --query-masquerade], 1, [ignore])
FWD_CHECK([--permanent --policy=foobar --query-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 1, [ignore])
FWD_RELOAD

dnl runtime --> permanent
m4_ifdef([TESTING_FIREWALL_OFFLINE_CMD], [],
FWD_CHECK([--policy=foobar --add-masquerade], 0, [ignore])
FWD_CHECK([--policy=foobar --add-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
FWD_CHECK([--policy foobar --query-masquerade], 0, [ignore])
FWD_CHECK([--policy=foobar --query-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
FWD_CHECK([--runtime-to-permanent], 0, [ignore])
FWD_CHECK([--permanent --policy foobar --query-masquerade], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar --query-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
dnl NFT_LIST_RULES([ip], [nat_policy_foobar_allow], 0, [dnl
dnl     FIXME: verify rules added
dnl ])
dnl NFT_LIST_RULES([ip6], [nat_policy_foobar_allow], 0, [dnl
dnl     FIXME: verify no rules added
dnl ])
dnl IPTABLES_LIST_RULES([nat], [pol_foobar_allow], 0, [dnl
dnl     FIXME: verify rules added
dnl ])
dnl IP6TABLES_LIST_RULES([nat], [pol_foobar_allow], 0, [dnl
dnl     FIXME: verify no rules added
dnl ])
FWD_CHECK([--permanent --policy=foobar --remove-masquerade], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar --remove-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 0, [ignore])
FWD_CHECK([--permanent --policy foobar --query-masquerade], 1, [ignore])
FWD_CHECK([--permanent --policy=foobar --query-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 1, [ignore])
])

dnl check that it's invalid for --> HOST
FWD_CHECK([--permanent --new-policy=foobar_host], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar_host --add-ingress-zone internal], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar_host --add-egress-zone HOST], 0, [ignore])
FWD_CHECK([--permanent --policy=foobar_host --add-masquerade], 112, [ignore], [ignore])
FWD_CHECK([--permanent --policy=foobar_host --add-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 112, [ignore], [ignore])
FWD_RELOAD
FWD_CHECK([--policy=foobar_host --add-masquerade], 112, [ignore], [ignore])
FWD_CHECK([--policy=foobar_host --add-rich-rule='rule family=ipv4 source address=10.10.10.0/24 masquerade'], 112, [ignore], [ignore])

dnl FIXME: verify only valid if:
dnl         - ingress zone is ANY
dnl         - ingress zone uses "source" and not "interface"
dnl             - iptables can't match iifname in postrouting
dnl                 - rejects the rule
dnl             - nftables supports it since 28f8bfd1ac94("netfilter: Support iif matches in POSTROUTING")
dnl                 - accepts the rule
dnl                 - will silently fail to match before this patch

FWD_END_TEST([-e '/ERROR: INVALID_ZONE/d'])

